import numpy as np
import msprime
import random
import json
import os
import h5py

from twosfs.config import configuration_from_json, parse_parameter_string
from slim.sfs_slim import spectra_from_tree_file
from twosfs.simulations import filename2seed
from twosfs.statistics import max_ks_distance

config = configuration_from_json("simulation_parameters.json")

rule search_forward_recombination_all:
    input:
        list(config.forward_recombination_search_files()),
    resources:
        mem = 100,
        time = 5

rule fitted_forward_spectra_all:
    input:
        config.fitted_forward_spectra_files()
    resources:
        mem = 100,
        time = 5

rule simulate_tree_file:
    output:
        config.tree_file,
    wildcard_constraints:
        rep="\d+",
    resources:
        mem=2000,
        time=600
    run:
        params=parse_parameter_string(wildcards.params)
        params["genome_length"] = config.slim_parameters["genome_length"]
        params["pop_size"] = config.slim_parameters["pop_size"]
        os.system( "slim -d \"fname='{}'\" -d mut_rate={} -d s={} -d rec_rate={} -d L={} -d N={} -s {} slim/run_slim_simulation.txt".format(output[0].replace('"','\\\"'), params["mut_rate"], params["s"], params["rec_rate"], int(params["genome_length"]), int(params["pop_size"]), filename2seed(output[0])) )


ruleorder: spectra_from_SLiM > simulate_initial_spectra

rule spectra_from_SLiM:
    input:
        config.tree_file,
    output:
        temp(config.initial_spectra_file),
    wildcard_constraints:
        model="sel",
        rep="\d+",
    resources:
        mem=3000,
        time=10,
    run:
        random.seed(filename2seed(output[0]))
        spectra_params = config.slim_parameters
        spectra_params["recombination_rate"] = parse_parameter_string(wildcards.params)["rec_rate"]
        samples = random.sample( 
            range(2*int(config.slim_parameters["pop_size"])), 
            k=config.slim_parameters["num_samples"]
        )
        spectra_params["samples"] = samples
        spectra = spectra_from_tree_file(input[0], spectra_params)
        spectra.save(output[0])


ruleorder: add_runs_from_SLiM > add_runs

rule add_runs_from_SLiM:
    output:
        "simulations/initial_spectra/model=sel.{params}.rep=all.npz",
    input:
        expand(
            "simulations/initial_spectra/model=sel.{params}.rep={rep}.npz",
            rep=range(config.slim_parameters["nruns"]),
            allow_missing=True,
        ),
    resources:
        time=10,
        mem=1000,
    run:
        total = add_spectra(load_spectra(infn) for infn in input)
        total.save(output[0])


ruleorder: search_recombination_rate_from_slim > search_recombination_rate

rule search_recombination_rate_from_slim:
    input:
        spectra_file=config.initial_spectra_file.replace(".rep={rep}.", ".rep=all."),
        demo_file=config.fitted_demography_file,
    output:
        config.recombination_search_file,
    wildcard_constraints:
        model = "sel"
    resources:
        time=500,
        mem=5000,
    run:
        params=parse_parameter_string(wildcards.params)
        rng = np.random.default_rng(filename2seed(output[0]))
        raw_spectra = load_spectra(input.spectra_file)
        with open(input.demo_file) as f:
            model_parameters = json.load(f)
        num_pairs = int(wildcards.pair_density) * degenerate_pairs(
            raw_spectra, int(wildcards.sequence_length)
        )
        spectra_samp = sample_spectra(raw_spectra, num_pairs=num_pairs, rng=rng)
        sim_kwargs = dict(
            model="pwc",
            model_parameters=model_parameters,
            msprime_parameters=(
                config.msprime_parameters
                | {
                    "sequence_length": int(wildcards.sequence_length),
                    "num_replicates": config.search_num_replicates,
                }
            ),
            random_seed=rng,
        )
        search_recombination_rates_save(
            output[0],
            spectra_samp,
            config.k_max,
            wildcards.folded == "True",
            sim_kwargs,
            params["rec_rate"] * config.slim_parameters["search_r_low"] * spectra_samp.tajimas_pi(),
            params["rec_rate"] * config.slim_parameters["search_r_high"]* spectra_samp.tajimas_pi(),
            config.search_iters,
        )


rule simulate_fitted_spectra_from_SLiM:
    input:
        search_file=config.recombination_search_file,
        demo_file=config.fitted_demography_file,
    output:
        temp(config.fitted_spectra_file),
    wildcard_constraints:
        rep="\d+",
    resources:
        time=20,
        mem=1000,
    run:
        rng = np.random.default_rng(filename2seed(output[0]))
        with h5py.File(input.search_file) as f:
            attrs_h = dict(f.get("spectra_high").attrs)
            attrs_l = dict(f.get("spectra_low").attrs)
        if attrs_h["ks_distance"] < attrs_l["ks_distance"]:
            r = attrs_h["recombination_rate"]
        else:
           r = attrs_l["recombination_rate"]
        with open(input.demo_file, "r") as f:
            model_parameters = json.load(f)
        spectra = simulate_spectra(
            model="pwc",
            model_parameters=model_parameters,
            msprime_parameters=config.msprime_parameters,
            scaled_recombination_rate=r,
            random_seed=filename2seed(output[0]),
        )
        spectra.save(output[0])
