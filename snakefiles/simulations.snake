import numpy as np
import json

from twosfs.config import configuration_from_json
from twosfs.spectra import add_spectra, load_spectra
from twosfs.simulations import filename2seed, simulate_spectra, model_prefixes
from twosfs.statistics import scan_parameters

config = configuration_from_json("simulation_parameters.json")

initial_spectra_file = "simulations/spectra/{prefix}.rep={rep}.npz"
fitted_demography_file = "simulations/fitted_demographies/{prefix}.demography={demo}.txt"

rule simulate_initial_spectra_all:
    input:
        expand(initial_spectra_file,
                prefix=model_prefixes(config),
                rep="all",
                )

rule fit_demographies_all:
    input:
        expand(fitted_demography_file,
                prefix=model_prefixes(config),
                demo=config.fitted_demographies,
                )

rule simulate_initial_spectra:
    output:
        temp(initial_spectra_file)
    wildcard_constraints:
        rep="\d+"
    run:
        spectra = simulate_spectra(
            model=wildcards.model,
            model_parameters=json.loads(wildcards.parameter_string),
            msprime_parameters=config.msprime_parameters,
            scaled_recombination_rate=config.scaled_recombination_rate,
            random_seed=filename2seed(output[0]),
            )
        spectra.save(output[0])


rule add_runs:
    output:
        'simulations/{dir}/{prefix}.rep=all.npz'
    input:
        expand('simulations/{dir}/{prefix}.rep={rep}.npz',
                rep=range(config.nruns),
                allow_missing=True)
    run:
        total = add_spectra(load_spectra(infn) for infn in input)
        total.save(output[0])


rule fit_demographies:
    input:
        datafile = "simulations/.tmp/{prefix}.sfs.txt",
        modelfile = "twosfs/models/{demo}.txt"
    output:
        fitted_demography_file
    log:
        "log/fastNeutrino.{prefix}.{demo}.log"
    shell:
        "fastNeutrino "
        "--maxB {config.fastNeutrino_maxB} "
        "--maxRandomRestarts {config.fastNeutrino_maxRandomRestarts} "
        "--modelFile {input.modelfile} "
        "--inferredModelOutputFile '{output}' "
        "< '{input.datafile}' "
        "> '{log}'"


rule fastNeutrinoInput:
    input:
        simulation_file = 'simulations/spectra/{prefix}.rep=all.npz'
    output:
        sfs_file = temp("simulations/.tmp/{prefix}.sfs.txt")
    run:
        spectra = load_spectra(input.simulation_file)
        spectra.export_to_fastNeutrino(output.sfs_file)

### OLD STUFF

max_k = 20
pair_densities = [100, 1000, 10000]
max_ds = [2, 6, 11, 16]
n_reps = 1000

rule compute_pvalues:
    input:
        "simulations/msprime/{prefix}.npz",
        "simulations/msprime/fastNeutrino.{prefix}.{model}.npz",
    output:
        "simulations/pvalues/{prefix}.{model}.json"
    run:
        spectra_comp = load_spectra(input[0])
        spectra_null = load_spectra(input[1])
        results = scan_parameters(spectra_comp, spectra_null, pair_densities, max_ds, max_k, n_reps)
        with open(output[0], "w") as outfile:
            json.dump(results, outfile)

rule compute_pvalues_recombination:
    input:
        "simulations/msprime/fastNeutrino.{prefix}.{model}.rec={r_factor}.npz",
        "simulations/msprime/fastNeutrino.{prefix}.{model}.npz",
    output:
        "simulations/pvalues/{prefix}.{model}.rec={r_factor}.json"
    run:
        spectra_comp = load_spectra(input[0])
        spectra_null = load_spectra(input[1])
        results = scan_parameters(spectra_comp, spectra_null, pair_densities, max_ds, max_k, n_reps)
        with open(output[0], "w") as outfile:
            json.dump(results, outfile)

rule msprime_from_fastNeutrino:
    input:
        "simulations/fastNeutrino/{prefix}.txt"
    output:
        temp('simulations/.tmp/fastNeutrino.{prefix}.rep{rep}.npz')
    run:
        # Use Kingman parameters, but add demographic events properly scaled
        parameters = parameter_map('kingman', default_parameters)
        parameters['demographic_events'] = scaled_demographic_events(input[0])
        parameters['random_seed'] = filename2seed(output[0])
        spectra = simulate_spectra(parameters)
        spectra.save(output[0])


rule msprime_from_fastNeutrino_modified_recombination:
    input:
        "simulations/fastNeutrino/{prefix}.txt"
    output:
        temp('simulations/.tmp/fastNeutrino.{prefix}.rec={r_factor}.rep{rep}.npz')
    run:
        # Use Kingman parameters, but add demographic events properly scaled
        # modify recombination rate by r_factor
        # Use shorter sequences (25 bases)
        parameters = parameter_map('kingman', default_parameters)
        parameters['demographic_events'] = scaled_demographic_events(input[0])
        parameters['recombination_rate'] *= float(wildcards.r_factor)
        parameters['length'] = 25
        parameters['random_seed'] = filename2seed(output[0])
        spectra = simulate_spectra(parameters)
        spectra.save(output[0])
