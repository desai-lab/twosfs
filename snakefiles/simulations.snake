import numpy as np
import json

from twosfs.spectra import add_spectra, load_spectra
from twosfs.simulations import filename2seed, simulate_spectra, list_rounded_parameters, make_parameter_string
from twosfs.statistics import scan_parameters

nruns = 100 # number of runs of each msprime job
scaled_recombination_rate = 0.1 # = 2 r * mean_coalescence_time
msprime_parameters = {
    "samples": 50, # number of diploid samples
    "ploidy": 2,
    "sequence_length": 100,
    "num_replicates": 10000,
}

d_alpha = 0.05
ALPHAS = list_rounded_parameters(np.arange(1 + d_alpha, 2.0, d_alpha))
GS = [0.5, 1.0, 2.0]
TS = [0.5, 1.0, 2.0]
RS = list_rounded_parameters(np.logspace(-1, 1, 5, base=2))

fitted_demographies = ["3Epoch"]

initial_spectra_file = "simulations/spectra/model={model}.params={parameter_string}.rep={rep}.npz"
fitted_model_file = "simulations/fitted_models/model={model}.params={parameter_string}.demography={demo}.txt"

rule simulate_initial_spectra_all:
    input:
        expand(initial_spectra_file,
                model="const",
                parameter_string="{}",
                rep="all",
                ),
        expand(initial_spectra_file,
                model="beta",
                parameter_string=[make_parameter_string(alpha=a) for a in ALPHAS],
                rep="all",
                ),
        expand(initial_spectra_file,
                model="exp",
                parameter_string=[make_parameter_string(end_time=t, growth_rate=g)
                    for t in TS for g in GS],
                rep="all",
                )

rule fit_demographies_all:
    input:
        expand(fitted_model_file,
                model="const",
                parameter_string="{}",
                demo=fitted_demographies,
                ),
        expand(fitted_model_file,
                model="beta",
                parameter_string=[make_parameter_string(alpha=a) for a in ALPHAS],
                demo=fitted_demographies,
                ),
        expand(fitted_model_file,
                model="exp",
                parameter_string=[make_parameter_string(end_time=t, growth_rate=g)
                    for t in TS for g in GS],
                demo=fitted_demographies,
                )


rule simulate_initial_spectra:
    output:
        temp(initial_spectra_file)
    wildcard_constraints:
        rep="\d+"
    run:
        spectra = simulate_spectra(
            model=wildcards.model,
            model_parameters=json.loads(wildcards.parameter_string),
            msprime_parameters=msprime_parameters,
            scaled_recombination_rate=scaled_recombination_rate,
            random_seed=filename2seed(output[0]),
            )
        spectra.save(output[0])


rule add_runs:
    output:
        'simulations/{dir}/{prefix}.rep=all.npz'
    input:
        expand('simulations/{dir}/{prefix}.rep={rep}.npz',
                rep=range(nruns),
                allow_missing=True)
    run:
        total = add_spectra(load_spectra(infn) for infn in input)
        total.save(output[0])


rule fastNeutrino:
    input:
        datafile = "simulations/.tmp/{prefix}.sfs.txt",
        modelfile = "twosfs/models/{demo}.txt"
    output:
        "simulations/fitted_models/{prefix}.demography={demo}.txt"
    log:
        "log/fastNeutrino.{prefix}.{demo}.log"
    shell:
        "fastNeutrino --maxB 20 --maxRandomRestarts 100 "
        "--modelFile {input.modelfile} "
        "--inferredModelOutputFile '{output}' "
        "< '{input.datafile}' "
        "> '{log}'"


rule fastNeutrinoInput:
    input:
        simulation_file = 'simulations/spectra/{prefix}.rep=all.npz'
    output:
        sfs_file = temp("simulations/.tmp/{prefix}.sfs.txt")
    run:
        spectra = load_spectra(input.simulation_file)
        spectra.export_to_fastNeutrino(output.sfs_file)

### OLD STUFF


ruleorder: msprime_from_fastNeutrino_modified_recombination > msprime_from_fastNeutrino > msprime

max_k = 20
pair_densities = [100, 1000, 10000]
max_ds = [2, 6, 11, 16]
n_reps = 1000

ruleorder: compute_pvalues_recombination > compute_pvalues

rule compute_pvalues:
    input:
        "simulations/msprime/{prefix}.npz",
        "simulations/msprime/fastNeutrino.{prefix}.{model}.npz",
    output:
        "simulations/pvalues/{prefix}.{model}.json"
    run:
        spectra_comp = load_spectra(input[0])
        spectra_null = load_spectra(input[1])
        results = scan_parameters(spectra_comp, spectra_null, pair_densities, max_ds, max_k, n_reps)
        with open(output[0], "w") as outfile:
            json.dump(results, outfile)

rule compute_pvalues_recombination:
    input:
        "simulations/msprime/fastNeutrino.{prefix}.{model}.rec={r_factor}.npz",
        "simulations/msprime/fastNeutrino.{prefix}.{model}.npz",
    output:
        "simulations/pvalues/{prefix}.{model}.rec={r_factor}.json"
    run:
        spectra_comp = load_spectra(input[0])
        spectra_null = load_spectra(input[1])
        results = scan_parameters(spectra_comp, spectra_null, pair_densities, max_ds, max_k, n_reps)
        with open(output[0], "w") as outfile:
            json.dump(results, outfile)

rule msprime_from_fastNeutrino:
    input:
        "simulations/fastNeutrino/{prefix}.txt"
    output:
        temp('simulations/.tmp/fastNeutrino.{prefix}.rep{rep}.npz')
    run:
        # Use Kingman parameters, but add demographic events properly scaled
        parameters = parameter_map('kingman', default_parameters)
        parameters['demographic_events'] = scaled_demographic_events(input[0])
        parameters['random_seed'] = filename2seed(output[0])
        spectra = simulate_spectra(parameters)
        spectra.save(output[0])


rule msprime_from_fastNeutrino_modified_recombination:
    input:
        "simulations/fastNeutrino/{prefix}.txt"
    output:
        temp('simulations/.tmp/fastNeutrino.{prefix}.rec={r_factor}.rep{rep}.npz')
    run:
        # Use Kingman parameters, but add demographic events properly scaled
        # modify recombination rate by r_factor
        # Use shorter sequences (25 bases)
        parameters = parameter_map('kingman', default_parameters)
        parameters['demographic_events'] = scaled_demographic_events(input[0])
        parameters['recombination_rate'] *= float(wildcards.r_factor)
        parameters['length'] = 25
        parameters['random_seed'] = filename2seed(output[0])
        spectra = simulate_spectra(parameters)
        spectra.save(output[0])
