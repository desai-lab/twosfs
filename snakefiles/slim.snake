import numpy as np
import msprime
import random
import json
import os

from twosfs.config import configuration_from_json, parse_parameter_string
from slim.sfs_slim import spectra_from_tree_file
from twosfs.simulations import filename2seed

config = configuration_from_json("simulation_parameters.json")

rule simulate_tree_file:
    output:
        config.tree_file
    wildcard_constraints:
        rep="\d+",
    resources:
        mem=5000,
        time=500
    run:
        params=parse_parameter_string(wildcards.params)
        os.system( "slim -d \"fname='{}'\" -d mut_rate={} -d s={} -d rec_rate={} -d L={} -s {} slim/run_slim_simulation.txt".format(output[0].replace('"','\\\"'), params['mut_rate'], params['s'], params['rec_rate'], int(params['L']), filename2seed(output[0])) )

rule spectra_from_SLiM:
    input:
        config.tree_file
    output:
        temp(config.initial_spectra_file)
    wildcard_constraints:
        model="sel",
        rep="\d+",
    resources:
        mem=3000,
        time=10
    run:
        random.seed(filename2seed(output[0]))
        params = config.slim_parameters
        samples = random.sample(range(int(2e4)), k=config.slim_parameters["num_samples"])
        params["samples"] = samples
        spectra = spectra_from_tree_file(input[0], params)
        spectra.save(output[0])

ruleorder: add_runs_from_SLiM > add_runs 

rule add_runs_from_SLiM:
    output:
        "simulations/initial_spectra/model=sel.{params}.rep=all.npz",
    input:
        expand(
            "simulations/initial_spectra/model=sel.{params}.rep={rep}.npz",
            rep=range(config.slim_parameters["nruns"]),
            allow_missing=True,
        ),
    resources:
        time=10,
        mem=1000,
    run:
        total = add_spectra(load_spectra(infn) for infn in input)
        total.save(output[0])

rule simulate_fitted_spectra_from_SLiM:
    output:
        temp(config.fitted_spectra_file),
    input:
        config.fitted_demography_file,
        config.initial_spectra_file.replace(".rep={rep}.", ".rep=all."),
    wildcard_constraints:
        model="sel",
        rep="\d+",
    resources:
        time=15,
        mem=1000,
    run:
        empirical_t2 = load_spectra(input[1]).tajimas_pi()
        with open(input[0], "r") as f:
            model_parameters = json.load(f)
        r = config.slim_parameters["recombination_rate"] * empirical_t2 * float(wildcards.rec_factor)
        spectra = simulate_spectra(
            model="pwc",
            model_parameters=model_parameters,
            msprime_parameters=config.msprime_parameters,
            scaled_recombination_rate=r,
            random_seed=filename2seed(output[0]),
        )
        spectra.save(output[0])
