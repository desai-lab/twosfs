import numpy as np
import json
import gzip

from twosfs.config import configuration_from_json, parse_parameter_string
from twosfs.simulations import filename2seed, simulate_spectra
from twosfs.spectra import add_spectra, load_spectra
from twosfs.statistics import (
    search_recombination_rates_save,
    degenerate_pairs,
    sample_spectra,
)

config = configuration_from_json("simulation_parameters.json")


rule simulate_initial_spectra_all:
    input:
        list(config.initial_spectra_files()),


rule fit_demographies_all:
    input:
        list(config.fitted_demography_files()),


rule search_recombination_all:
    input:
        list(config.recombination_search_files()),


rule simulate_initial_spectra:
    output:
        temp(config.initial_spectra_file),
    wildcard_constraints:
        rep="\d+",
    run:
        spectra = simulate_spectra(
            model=wildcards.model,
            model_parameters=parse_parameter_string(wildcards.params),
            msprime_parameters=config.msprime_parameters,
            scaled_recombination_rate=config.scaled_recombination_rate,
            random_seed=filename2seed(output[0]),
        )
        spectra.save(output[0])


rule fit_demographies:
    input:
        config.initial_spectra_file.replace(".rep={rep}.", ".rep=all."),
    output:
        config.fitted_demography_file,
    resources:
        time=10,
        mem=1000,
    run:
        spectra = load_spectra(input[0])
        fit = spectra.fit_pwc_demography(
            folded=wildcards.folded == "True",
            k_max=config.k_max,
            num_epochs=config.num_epochs,
            penalty_coef=config.penalty_coef,
        )
        with open(output[0], "w") as f:
            f.write(fit.toJson())


rule search_recombination_rate:
    input:
        spectra_file=config.initial_spectra_file.replace(".rep={rep}.", ".rep=all."),
        demo_file=config.fitted_demography_file,
    output:
        config.recombination_search_file,
    resources:
        time="24:00:00",
    run:
        rng = np.random.default_rng(filename2seed(output[0]))
        raw_spectra = load_spectra(input.spectra_file)
        with open(input.demo_file) as f:
            model_parameters = json.load(f)
        num_pairs = int(wildcards.pair_density) * degenerate_pairs(
            raw_spectra, int(wildcards.sequence_length)
        )
        spectra_samp = sample_spectra(raw_spectra, num_pairs=num_pairs, rng=rng)
        sim_kwargs = dict(
            model="pwc",
            model_parameters=model_parameters,
            msprime_parameters=(
                config.msprime_parameters
                | {
                    "sequence_length": int(wildcards.sequence_length),
                    "num_replicates": config.search_num_replicates,
                }
            ),
            random_seed=rng,
        )
        search_recombination_rates_save(
            output[0],
            spectra_samp,
            config.k_max,
            wildcards.folded == "True",
            sim_kwargs,
            config.search_r_low,
            config.search_r_high,
            config.search_iters,
        )


rule add_runs:
    output:
        "{prefix}.rep=all.{ext}",
    input:
        expand(
            "{prefix}.rep={rep}.{ext}",
            rep=range(config.nruns),
            allow_missing=True,
        ),
    resources:
        time=60,
        mem=1000,
    run:
        total = add_spectra(load_spectra(infn) for infn in input)
        total.save(output[0])
