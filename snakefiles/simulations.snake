import numpy as np
import json
import gzip

from twosfs.config import configuration_from_json, parse_parameter_string
from twosfs.simulations import filename2seed, simulate_spectra
from twosfs.spectra import add_spectra, load_spectra
from twosfs.statistics import scan_parameters

config = configuration_from_json("simulation_parameters.json")


rule simulate_initial_spectra_all:
    input:
        list(config.initial_spectra_files()),


rule fit_demographies_all:
    input:
        list(config.fitted_demography_files()),


rule simulate_fitted_spectra_all:
    input:
        list(config.fitted_spectra_files()),


rule compute_ks_distances_all:
    input:
        list(config.initial_ks_distance_files()),
        list(config.fitted_ks_distance_files()),


rule simulate_initial_spectra:
    output:
        temp(config.initial_spectra_file),
    wildcard_constraints:
        rep="\d+",
    run:
        spectra = simulate_spectra(
            model=wildcards.model,
            model_parameters=parse_parameter_string(wildcards.params),
            msprime_parameters=config.msprime_parameters,
            scaled_recombination_rate=config.scaled_recombination_rate,
            random_seed=filename2seed(output[0]),
        )
        spectra.save(output[0])


rule fit_demographies:
    input:
        config.initial_spectra_file.replace(".rep={rep}.", ".rep=all."),
    output:
        config.fitted_demography_file,
    resources:
        time=10,
        mem=1000,
    run:
        spectra = load_spectra(input[0])
        fit = spectra.fit_pwc_demography(
            folded=wildcards.folded == "True",
            k_max=config.k_max,
            num_epochs=config.num_epochs,
            penalty_coef=config.penalty_coef,
        )
        with open(output[0], "w") as f:
            f.write(fit.toJson())


rule simulate_fitted_spectra:
    output:
        temp(config.fitted_spectra_file),
    input:
        config.fitted_demography_file,
    wildcard_constraints:
        rep="\d+",
    resources:
        time=60,
        mem=1000,
    run:
        with open(input[0], "r") as f:
            model_parameters = json.load(f)
        r = config.scaled_recombination_rate * float(wildcards.rec_factor)
        spectra = simulate_spectra(
            model="pwc",
            model_parameters=model_parameters,
            msprime_parameters=config.msprime_parameters,
            scaled_recombination_rate=r,
            random_seed=filename2seed(output[0]),
        )
        spectra.save(output[0])


rule add_runs:
    output:
        "{prefix}.rep=all.{ext}",
    input:
        expand(
            "{prefix}.rep={rep}.{ext}",
            rep=range(config.nruns),
            allow_missing=True,
        ),
    resources:
        time=60,
        mem=1000,
    run:
        total = add_spectra(load_spectra(infn) for infn in input)
        total.save(output[0])


rule compute_initial_ks_distances:
    output:
        config.initial_ks_distance_file,
    input:
        config.initial_spectra_file.replace(".rep={rep}.", ".rep=all."),
        config.fitted_spectra_file.replace(
            ".rec_factor={rec_factor}.rep={rep}.",
            ".rec_factor=1.0.rep=all.",
        ),
    run:
        data = scan_parameters(
            load_spectra(input[0]),
            load_spectra(input[1]),
            config.pair_densities,
            config.max_distances,
            config.k_max,
            wildcards.folded,
            config.n_reps,
        )
        with gzip.open(output[0], "wt") as outfile:
            outfile.write(json.dumps(list(data)))


rule compute_fitted_ks_distances:
    output:
        config.fitted_ks_distance_file,
    input:
        config.fitted_spectra_file.replace(".rep={rep}.", ".rep=all."),
        config.fitted_spectra_file.replace(
            ".rec_factor={rec_factor}.rep={rep}.",
            ".rec_factor=1.0.rep=all.",
        ),
    run:
        data = scan_parameters(
            load_spectra(input[0]),
            load_spectra(input[1]),
            config.pair_densities,
            config.max_distances,
            config.k_max,
            wildcards.folded,
            config.n_reps,
        )
        with gzip.open(output[0], "wt") as outfile:
            outfile.write(json.dumps(list(data)))
