import numpy as np
import json

from twosfs.config import configuration_from_json, parse_parameter_string
from twosfs.demography import read_fastNeutrino_output
from twosfs.simulations import filename2seed, simulate_spectra
from twosfs.spectra import add_spectra, load_spectra
from twosfs.statistics import scan_parameters

config = configuration_from_json("simulation_parameters.json")


rule simulate_initial_spectra_all:
    input:
        list(config.initial_spectra_files()),


rule fit_demographies_all:
    input:
        list(config.fitted_demography_files()),


rule simulate_fitted_spectra_all:
    input:
        list(config.fitted_spectra_files()),


rule simulate_initial_spectra:
    output:
        temp(config.initial_spectra_file),
    wildcard_constraints:
        rep="\d+",
    run:
        spectra = simulate_spectra(
            model=wildcards.model,
            model_parameters=parse_parameter_string(wildcards.params),
            msprime_parameters=config.msprime_parameters,
            scaled_recombination_rate=config.scaled_recombination_rate,
            random_seed=filename2seed(output[0]),
        )
        spectra.save(output[0])


rule simulate_fitted_spectra:
    output:
        temp(config.fitted_spectra_file),
    input:
        config.fitted_demography_file,
    wildcard_constraints:
        rep="\d+",
    run:
        model_parameters = dict(
            zip(
                ("sizes", "start_times", "initial_size"),
                read_fastNeutrino_output(input[0]),
            )
        )
        r = config.scaled_recombination_rate * float(wildcards.rec_factor)
        spectra = simulate_spectra(
            model="pwc",
            model_parameters=model_parameters,
            msprime_parameters=config.msprime_parameters,
            scaled_recombination_rate=r,
            random_seed=filename2seed(output[0]),
        )
        spectra.save(output[0])


rule add_runs:
    output:
        "{prefix}.rep=all.npz",
    input:
        expand(
            "{prefix}.rep={rep}.npz",
            rep=range(config.nruns),
            allow_missing=True,
        ),
    run:
        total = add_spectra(load_spectra(infn) for infn in input)
        total.save(output[0])


rule fit_demographies:
    input:
        datafile=config.temp_sfs_file,
        modelfile=config.demographic_model_file,
    output:
        config.fitted_demography_file,
    params:
        maxB=config.fastNeutrino_maxB,
        maxRandomRestarts=config.fastNeutrino_maxRandomRestarts,
    log:
        "log/fastNeutrino.{model}.{params}.{demo}.log",
    shell:
        "fastNeutrino "
        "--maxB {params.maxB} "
        "--maxRandomRestarts {params.maxRandomRestarts} "
        "--modelFile {input.modelfile} "
        "--inferredModelOutputFile '{output}' "
        "< '{input.datafile}' "
        "> '{log}'"


rule fastNeutrinoInput:
    input:
        config.initial_spectra_file.replace(".rep={rep}.", ".rep=all."),
    output:
        temp(config.temp_sfs_file),
    run:
        spectra = load_spectra(input[0])
        spectra.export_to_fastNeutrino(output[0])


### OLD STUFF

max_k = 20
pair_densities = [100, 1000, 10000]
max_ds = [2, 6, 11, 16]
n_reps = 1000


rule compute_pvalues:
    input:
        "simulations/msprime/{prefix}.npz",
        "simulations/msprime/fastNeutrino.{prefix}.{model}.npz",
    output:
        "simulations/pvalues/{prefix}.{model}.json",
    run:
        spectra_comp = load_spectra(input[0])
        spectra_null = load_spectra(input[1])
        results = scan_parameters(
            spectra_comp, spectra_null, pair_densities, max_ds, max_k, n_reps
        )
        with open(output[0], "w") as outfile:
            json.dump(results, outfile)


rule compute_pvalues_recombination:
    input:
        "simulations/msprime/fastNeutrino.{prefix}.{model}.rec={r_factor}.npz",
        "simulations/msprime/fastNeutrino.{prefix}.{model}.npz",
    output:
        "simulations/pvalues/{prefix}.{model}.rec={r_factor}.json",
    run:
        spectra_comp = load_spectra(input[0])
        spectra_null = load_spectra(input[1])
        results = scan_parameters(
            spectra_comp, spectra_null, pair_densities, max_ds, max_k, n_reps
        )
        with open(output[0], "w") as outfile:
            json.dump(results, outfile)
