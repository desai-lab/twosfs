import numpy as np

import msprime
from src.twosfs import sims2sfs
from src.simulations import beta_timescale


def parameter_map(prefix):
    """Convert a file prefix to a set of msprime parameters."""
    default_parameters = {
        'sample_size': 100,
        'length': 100,
        'recombination_rate': 0.1,
        'num_replicates': 10000,
    }

    if prefix == 'test':
        parameters = {'sample_size': 11, 'num_replicates': 100}
    elif prefix == 'kingman':
        parameters = {}
    elif prefix.startswith('xibeta'):
        alpha = float(prefix.split('alpha=')[1])
        # Rescale recombination to keep r*T_2 constant
        r = default_parameters['recombination_rate'] / beta_timescale(alpha)
        parameters = {'model': msprime.BetaCoalescent(alpha=alpha),
                      'recombination_rate':r}
    else:
        raise KeyError('Simulation prefix not found')

    return dict(default_parameters, **parameters)


ALPHAS = [f'{a:.2f}' for a in np.arange(1.5, 2.0, 0.05)]

rule simulations:
    group: 'cleanup'
    input:
        'simulations/msprime/kingman.npz',
        expand(['simulations/msprime/xibeta-alpha={alpha}.npz',
                'simulations/fastNeutrino/xibeta-alpha={alpha}.FixedTimes.txt',
                'simulations/fastNeutrino/xibeta-alpha={alpha}.3Epoch.txt'],
                alpha=ALPHAS)
    output:
        'simulations.tgz'
    shell:
        'tar -czf {output} {input}'

rule msprime:
    output:
        temp('simulations/.tmp/{prefix}.rep{rep}.npz')
    run:
        parameters = parameter_map(wildcards.prefix)
        parameters['random_seed'] = 1 + int(wildcards.rep)
        sims = msprime.simulate(**parameters)
        onesfs, twosfs = sims2sfs(sims,
                                  parameters['sample_size'],
                                  parameters['length'])
        np.savez_compressed(output[0], onesfs=onesfs, twosfs=twosfs)

rule average_runs:
    group: 'cleanup'
    output:
        'simulations/msprime/{prefix}.npz'
    input:
        expand('simulations/.tmp/{prefix}.rep{rep}.npz', rep=range(10), allow_missing=True)
    run:
        onesfs = 0.0
        twosfs = 0.0
        for infn in input:
            data = np.load(infn)
            onesfs += data['onesfs']
            twosfs += data['twosfs']
        onesfs /= len(input)
        twosfs /= len(input)
        np.savez_compressed(output[0], onesfs=onesfs, twosfs=twosfs)

rule fastNeutrino:
    input:
        datafile = "simulations/.tmp/{prefix}.sfs.txt",
        modelfile = "src/models/{model}.txt"
    output:
        "simulations/fastNeutrino/{prefix}.{model}.txt"
    log:
        "log/fastNeutrino.{prefix}.{model}.log"
    shell:
        "fastNeutrino --maxB 10 --maxRandomRestarts 100 "
        "--modelFile {input.modelfile} "
        "--inferredModelOutputFile {output} "
        "< {input.datafile} "
        "> {log}"

rule fastNeutrinoInput:
    input:
        simulation_file = 'simulations/msprime/{prefix}.npz'
    output:
        sfs_file = temp("simulations/.tmp/{prefix}.sfs.txt")
    run:
        n = parameter_map(wildcards.prefix)['sample_size']
        sfs = np.load(input.simulation_file)['onesfs']
        sfs[0] = 100
        with open(output.sfs_file, 'w') as outfile:
            outfile.write(f'{n}\t1\n')
            outfile.write('\n'.join(map(str, sfs)) + '\n')
