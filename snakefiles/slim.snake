import numpy as np
import msprime
import random
from slim.sfs_slim import get_tseq
from twosfs.simulations import filename2seed

genome_length = int(1e5)

rule run_SLiM:
    output:
        'simulations/tree_files/gamma_{g}_mu_{mu}_s_{s}_run_{run}.trees'
    resources:
        time = 500,
        mem = 1000,
    shell:
        "slim -d \"fname='{output}'\" -d mu=1e-{wildcards.mu} -d s={wildcards.s}/100 -d gamma={wildcards.g}/{genome_length} -d L={genome_length} slim/slim_sim.txt"

ruleorder: add_runs_from_SLiM > add_runs

rule add_runs_from_SLiM:
    group: 'cleanup'
    output:
        'simulations/msprime/gamma_{g}_mu_{mu}_s_{s}.npz'
    input:
        expand('simulations/tree_files/gamma_{g}_mu_{mu}_s_{s}_run_{rep}.trees', rep = np.arange(1000), allow_missing = True)
    resources: time=800,
    run:
        for rep, fname in enumerate(input):
            random.seed(filename2seed(fname))
            samples = random.sample(range(20000), k = 100)
            num_bp = 100
            recombination_rate = float(wildcards.g) * 1/genome_length
            num_trees = 500
            print(genome_length)
            windows = np.arange(start = 0, stop = num_bp + 1, step = 1)
            tseq_array = get_tseq( str(fname), length = genome_length, samples = samples, num_trees = num_trees,
                                num_bp = num_bp )
            spectra = sum( spectra_from_TreeSequence(windows, recombination_rate, tseq) for tseq in tseq_array )
            if rep == 0:
                total = spectra
            else:
                total += spectra

        total.save(output[0])
