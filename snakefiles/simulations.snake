import numpy as np

import msprime
from twosfs.twosfs import sims2sfs, save_spectra, load_spectra, avg_spectra, export_to_fastNeutrino
from twosfs.simulations import beta_timescale, filename2seed
from twosfs.demographicmodel import scaled_demographic_events


def parameter_map(prefix):
    """Convert a file prefix to a set of msprime parameters."""
    default_parameters = {
        'sample_size': 100,
        'length': 100,
        'recombination_rate': 0.1,
        'num_replicates': 10000,
    }

    if prefix == 'test':
        parameters = {'sample_size': 21, 'num_replicates': 100}
    elif prefix == 'kingman':
        parameters = {}
    elif prefix.startswith('xibeta'):
        alpha = float(prefix.split('alpha=')[1])
        # Rescale recombination to keep r*T_2 constant
        r = default_parameters['recombination_rate'] / beta_timescale(alpha)
        parameters = {'model': msprime.BetaCoalescent(alpha=alpha),
                      'recombination_rate':r}
    else:
        raise KeyError('Simulation prefix not found')

    return dict(default_parameters, **parameters)


ALPHAS = [f'{a:.2f}' for a in np.arange(1.5, 2.0, 0.05)]

rule simulations:
    group: 'cleanup'
    input:
        'simulations/msprime/kingman.npz',
        expand(['simulations/msprime/xibeta-alpha={alpha}.npz',
                'simulations/fastNeutrino/xibeta-alpha={alpha}.{model}.txt',
                'simulations/msprime/fastNeutrino.xibeta-alpha={alpha}.{model}.npz'],
                alpha=ALPHAS, model=['3Epoch'])
    output:
        'simulations.tgz'
    shell:
        'tar -czf {output} {input}'

ruleorder: msprime_from_fastNeutrino > msprime

rule msprime:
    output:
        temp('simulations/.tmp/{prefix}.rep{rep}.npz')
    run:
        parameters = parameter_map(wildcards.prefix)
        parameters['random_seed'] = filename2seed(output[0])
        sims = msprime.simulate(**parameters)
        spectra = sims2sfs(sims,
                           parameters['sample_size'],
                           parameters['length'])
        save_spectra(output[0], *spectra)

rule msprime_from_fastNeutrino:
    input:
        "simulations/fastNeutrino/{prefix}.txt"
    output:
        temp('simulations/.tmp/fastNeutrino.{prefix}.rep{rep}.npz')
    run:
        # Use Kingman parameters, but add demographic events properly scaled
        parameters = parameter_map('kingman')
        parameters['demographic_events'] = scaled_demographic_events(input[0])
        parameters['random_seed'] = filename2seed(output[0])
        sims = msprime.simulate(**parameters)
        spectra = sims2sfs(sims,
                           parameters['sample_size'],
                           parameters['length'])
        save_spectra(output[0], *spectra)


rule average_runs:
    group: 'cleanup'
    output:
        'simulations/msprime/{prefix}.npz'
    input:
        expand('simulations/.tmp/{prefix}.rep{rep}.npz', rep=range(10), allow_missing=True)
    run:
        data = [load_spectra(infn) for infn in input]
        avg = avg_spectra(data)
        save_spectra(output[0], *avg)

rule fastNeutrino:
    input:
        datafile = "simulations/.tmp/{prefix}.sfs.txt",
        modelfile = "twosfs/models/{model}.txt"
    output:
        "simulations/fastNeutrino/{prefix}.{model}.txt"
    log:
        "log/fastNeutrino.{prefix}.{model}.log"
    shell:
        "fastNeutrino --maxB 20 --maxRandomRestarts 100 "
        "--modelFile {input.modelfile} "
        "--inferredModelOutputFile {output} "
        "< {input.datafile} "
        "> {log}"

rule fastNeutrinoInput:
    input:
        simulation_file = 'simulations/msprime/{prefix}.npz'
    output:
        sfs_file = temp("simulations/.tmp/{prefix}.sfs.txt")
    run:
        sfs = load_spectra(input.simulation_file)[0]
        export_to_fastNeutrino(output.sfs_file, sfs)
